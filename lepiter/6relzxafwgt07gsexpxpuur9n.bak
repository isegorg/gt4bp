{
	"__schema" : "4.1",
	"__type" : "page",
	"children" : {
		"__type" : "snippets",
		"items" : [
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-12T11:17:22.809978+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-12T11:18:06.828854+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "O4mfWlT9DQCMcKsjBr80cg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "We can delegate the player O moves to the program in order to play human vs machine games."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-12T11:18:17.523446+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-12T11:19:37.585652+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "IkU/XlT9DQCO/KTKBr80cg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "Our first approach consists of a trivial logic that waits for an X's *moveAccepted* event and then request an O's move to any free square. "
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-12T11:19:41.061471+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-12T11:19:45.725282+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "i/U5Y1T9DQCSCodfBr80cg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "##Trivial logic"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-12T11:19:54.684354+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-12T13:28:00.335865+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "5NMJZFT9DQCSV9nOBr80cg=="
				},
				"code" : "btOPlayerBlock := [ :row :col |\r\t'bp.registerBThread(\"OPlayer(' , row asString , ', ' , col asString , ')\", function() {\n    var XMoveAcceptedES = bp.EventSet(\"XMoveAccepted\", function(e) {\n        return e.name == \"moveAccepted\" && e.data.player == \"X\";\n    });\r    while (true) {\n        bp.sync({ waitFor: XMoveAcceptedES });\n        bp.sync({ request: bp.Event(\"move\", { \"player\": \"O\", \"row\": ', row asString , ', \"col\": ' , col asString , '\t\t}) });\n    }\n});'\r].\t\t\t\r\rbtOPlayer := String streamContents: [:stream | \r\t1 to: 3 do: [ :row |\r\t    1 to: 3 do: [ :col |\r\t        stream nextPutAll: (btOPlayerBlock value: row value: col)\r\t    ]\r\t]\r].\r\rbtOPlayer"
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-12T11:34:00.080902+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-12T13:36:14.719629+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "OY5tllT9DQCiklBnBr80cg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "As you notice, we define a b-thread for each square. Each b-thread is waiting for any X player move and it requests the O move to that square. \n\nFor example, after the first X *moveAccepted*, the 9 b-threads we are defining  will request the O player move to its square. As all these b-threads have the same priority, the b-threads coordinator will choose randomly between all these selectable events."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-12T14:21:14.28515+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-12T14:22:56.622019+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "flyD7Fb9DQCGrrGDDVuQdA=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "However, before try the automating of player O, it's required that we modified the previous b-thread responsible of alterning turns, because from now on we should take into account the player's value in the *move* events:"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-12T14:23:01.604847+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-12T14:24:30.742026+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "Fe7o8lb9DQCLKFBjDVuQdA=="
				},
				"code" : "Gt4BpTicTacToeExamples compile: '\rbtAlterningTurns\r\t^ ''bp.registerBThread(\"TurnManager\", function(){\n    var XMoveES = bp.EventSet(\"move\", function(evt) {\n\t    return (evt.data == null) ? false : (evt.name == \"move\" && evt.data.player == \"X\");\n    });\r    var OMoveES = bp.EventSet(\"move\", function(evt) {\n\t    return (evt.data == null) ? false : evt.name == \"move\" && evt.data.player == \"O\";\n    });\n    while (true) {\n        // X turn\n        var xMove = bp.sync({ waitFor: XMoveES, block: OMoveES });\n        bp.sync({ request:bp.Event(\"moveAccepted\",\n            { \"player\": \"X\",\n\t          \"row\": xMove.data.row,\n\t          \"col\": xMove.data.col })\n        });\n\n        // O turn\n        var oMove = bp.sync({ waitFor: moveES, block: XMoveES\t\t });\n        bp.sync({ request:bp.Event(\"moveAccepted\",\n            { \"player\": \"O\",\n\t          \"row\": oMove.data.row,\n\t          \"col\": oMove.data.col })\n        });\n    }\n});''' classified: #'example - support'."
			},
			{
				"__type" : "textSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-12T11:45:56.143105+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-12T11:46:02.30835+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "LswbwVT9DQC4K5lMBr80cg=="
				},
				"paragraphStyle" : {
					"__type" : "textStyle"
				},
				"string" : "## Let's try it"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-12T11:45:46.736919+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-12T13:34:57.787638+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "MkWMwFT9DQC4AYrCBr80cg=="
				},
				"code" : "game := Gt4BpTicTacToeExamples new allRulesGame\r\tloadBThread: btOPlayer named: 'btOPlayer.js';\r\tstart.\t\t\t\t\t\t\t\t\t\t"
			},
			{
				"__type" : "pharoSnippet",
				"children" : {
					"__type" : "snippets",
					"items" : [ ]
				},
				"createEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"createTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-12T11:47:13.747872+02:00"
					}
				},
				"editEmail" : {
					"__type" : "email",
					"emailString" : "<unknown>"
				},
				"editTime" : {
					"__type" : "time",
					"time" : {
						"__type" : "dateAndTime",
						"dateAndTimeString" : "2025-10-12T12:52:09.87764+02:00"
					}
				},
				"uid" : {
					"__type" : "uid",
					"uidString" : "vfO7xVT9DQC6Xc8BBr80cg=="
				},
				"code" : "game stop"
			}
		]
	},
	"createEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"createTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2025-10-12T11:17:16.694648+02:00"
		}
	},
	"editEmail" : {
		"__type" : "email",
		"emailString" : "<unknown>"
	},
	"editTime" : {
		"__type" : "time",
		"time" : {
			"__type" : "dateAndTime",
			"dateAndTimeString" : "2025-10-12T11:30:02.169961+02:00"
		}
	},
	"pageType" : {
		"__type" : "namedPage",
		"title" : "Automating the player O moves"
	},
	"uid" : {
		"__type" : "uuid",
		"uuid" : "8b179f5a-54fd-0d00-8c6f-1c4b06bf3472"
	}
}